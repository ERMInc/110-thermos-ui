#+TITLE: Thermos UI
* Tooling

This builds using [[https://boot-clj.com][boot]] now. It seemed hard to get leiningen to handle
live-reloading of server side & frontend & less, etc.

You can start a dev environment using 'boot dev'.

You can run tests with 'boot testing run-tests'

* Work list
- Devtools
  - [X] Add zero cache expiry in dev mode on backend
  - [X] Work out why npm deps intermittenly fail, how to avoid
    Appears that running lein clean; lein figwheel usually works.
    The implementation detail is inside the clojurescript compiler.
    It depends on shelling out to npm to install a thing called 'module-deps'.
    Then it uses this 'module-deps' tool to construct the extra dependency information.

    I am not sure why this doesn't always happen.
    Best guess is that figwheel does some incremental or partial compilation which doesn't trigger this process?

    Possible solutions are:
    - Vendor js dependencies directly
    - Package up rbush, jsts & co with requires & externs, and then depend on them
    - Add foreign-libs information into the compiler options??
      Tried this on Mark's laptop and it didn't seem to do much.
  - [ ] Understand source mapping in chrome
- Backend data
  - [X] Make backend query both paths and buildings together
  - [ ] Add more fields from / to backend
    - Ideally we want a spec for this?
  - [ ] Populate dev backend db with more dummy data / more areas
    - [ ] Cut out each area we're interested in
    - [ ] Make road stuff
    - [ ] Make some very bogus demand
    - [ ] Add uploading for shapefiles?
  - [ ] Agree interface with josh/toby for adding the key data
- [ ] Redo goldenlayout / investigate alternatives
  - Understand how this affects leaflet
  - https://github.com/caplin/FlexLayout
    looks like an alternative which may be better?
- [ ] Add table component back in
  - [ ] Do we need virtual table
    - [ ] If yes, wrap virtual table API to be nicer
  - [ ] Sorting
  - [ ] Selection
  - [ ] Excel-style autofilter
- Map
  - [ ] Area selection tool for map
  - [X] Colouring in for map
  - [ ] Filter for map
  - [ ] Pan to selection button
  - [ ] Far out zoom speedup
    [[http://locationtech.github.io/jts/javadoc/org/locationtech/jts/simplify/DouglasPeuckerSimplifier.html][What about this]]
  - [X] Look at having an atom for each tile?
    - [X] Not sure this is working right, sometimes we don't draw on
      load. Maybe my reagent cursor is too lazy?
  - [ ] Unloading invisible data
  - [ ] Avoid loading things we already have
  - [ ] Don't break document on load
    - [ ] Where should the save / load handlers live
      I put one in specs/document and one in operations, I'm lost and confused.
- Inspector page
  - [ ] Single element
  - [ ] Multiple elements
  - [ ] Selection manipulation features
  - [ ] Other operations
- URL routing
  - [X] maybe split project list into being another page (ss rendered, why not?)
  - [ ] Make a place where all the URLs come from in the code
    Started this, but not finished it. Not sure if we can put the patterns into
    compojure routes as functoins, since the routes are macros
    - need URL patterns and URL generators
- Optimiser interface
  TODO
- Results viewing
  TODO
