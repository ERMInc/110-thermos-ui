* Major
** Heuristic optimisation
** Supply model
*** Adding profiles to buildings
*** Generating overall profile with right properties
*** Implement model
*** Make UI for model's data inputs
** Objectives
*** System cost/benefit
min âˆ‘ capex + opex + emissions
st. all demands met

actually this is structurally quite similar to the existing one.
** Non-network technologies
At the moment, non-network technologies are represented only in terms of their emissions.
More specification work is need to include more detail about non-network technologies in the optimisation:

1. How a more detailed counterfactual affects the objective, or "What is being maximised?"

   If we are to model more technologies, they will have to have some impact on the objective function (otherwise they wouldn't change anything).
   The impact of a technology is likely to be thought of in terms of:

   - Its capital costs
   - Its operating costs
   - Its emissions (as a cost)

   These values can be combined into a net present value in the normal way, and added to the objective.

   However, if we do this, we need to think a bit about the system boundary we are optimising.
   At the moment, the optimisation maximises npv(revenues - costs) /for the network/.
   Revenues come from the sale of heat to customers, and costs come from emissions, capital costs and the purchase of heat from a supply.

   For an alternative technology (e.g. a heat pump), the costs and revenues accrue to /different entities/ than the network.

   To include these costs and revenues in the objective sensibly, we need to optimise something different.
   A sensible candidate here would be npv(-costs) /for the population/, so we would be trying to select technologies so as to minimize the sum of:

   - Capital costs for heat plant / network / other technologies
   - Fuel (or input heat) cost for supplying all the demands
   - Monetised emissions

   In this there is no heat tariff, because that transaction is now inside the boundary we are considering.
   As a side effect of this change, the solution produced may not produce an economically viable heat network if the network stands alone.

   *TODO*
   We need to understand /why/ this feature is desirable, as knowing the end purpose (what is 'good') will decide the form of the objective function.

2. How should we model each technology?

   We have to work out a realistic model for each technology. It's always possible to do a simple model, but if it's too simple it's no use and so worse than doing nothing.
   For example, we could just say that every technology is structurally the same: they have a fixed cost, cost/kw, cost/kwh and some emissions factors. 

   There are two really significant parts to this:

   1. What determines the cost of a particular technology?

      For example, if we are considering solar-thermal augmented heat pumps, we would need to have an idea of:

      - How much area is available for panels in a place
      - How much panels cost per area
      - Something about what temperature heat these panels would create, and how this affects the power requirement from a heat pump

      To model this correctly is definitely complex and requires a lot of detailed information.
      The COP of a heat pump is a complex function which depends on the pump's design and the input & output temperatures asked of it.
      The input & output temperature requirements will change over time, so the relationship in time between thermal input from the sun and heat output would be important.

      The output temperature is also affected by the emitters and insulation within the building.

   2. As an extension of the above, do the non-network technologies operate completely independently?

      For example, do we need to consider electrical distribution grid headroom and reinforcement costs for electrical heating?
      If we do, then this makes a lot of extra optimisation and model complexity, because there are a new set of fairly nonlinear costs to do with the technology choice in multiple buildings.
      We would also need a lot more data to work out which buildings affect which parts of the distribution network.

      I (Tom) think this would probably be a dangerous amount of extra work to take on.

      *TODO* 

      We need to produce a list of technologies to consider, and we then need to determine for each one what is involved in the simplest model that's worth having.
      I (Tom) would say that to do this properly we need some expert input on each one - I can come up with a bunch of different possible formulations at various levels of detail, but I do not know:

      - What I would be missing out
      - What would be excess precision versus what would be so imprecise as to be no use at all

3. How does this fit into the user interface?

   All I've written about so far is the modelling side - once we have done the model we would also need to work out how this goes in the user interface.
   I (Tom) think it is premature to think about this, as the UI requirements will relate closely to the data that needs to go in.

   At least we will need a list of technologies, and a big switch to change the objective between network NPV and system NPV.
** Cooling model
*** Creation of cooling demand estimates within the map
*** Creation of cooling network mode
*** Consider trigeneration?
**** Are the pipe costs affected by sharing a trench?
* Minor improvements & bugs
** TODO Should all the NPV / finance calculation be moved into clojure so there's only 1 of it
** TODO Non-diversified load category
** TODO Scenario generation tools
- Modulate demands by X% either way
** TODO Clear solution button
** TODO Reevaluate solution with other parameters?
** TODO Evaluate solution with more detailed objective?
- Nonlinear cost curve
- Stepped pipe sizes
** TODO Count of supplies constraint / count of demands constraint
** TODO More detail in cost structure
- [X] Tariff: fixed cost, capacity cost, unit cost
- [X] Connection cost: fixed, capacity
- [ ] Repeating capital costs for plant
  Can this be rolled into operating cost?
** TODO Rearrangement of storage for parameters
- Defined sets of parameters for buildings & paths
- Buildings should take tariff parameters, connection cost parameters, co2 parameters
- Paths should take cost parameters
- Editor dialogs should assign buildings / paths to these parameters
- Selection info should show which parameters are so assigned
** DONE Prevent connectors getting reintroduced
** TODO Prevent loss of custom information when panning
** TODO Weird bug: James' network doesn't appear when he opens it
** TODO map-form delete invalid joins when things removed
** TODO map-form tick-boxes for applying defaults in OSM? (also add some defaults)
** TODO Make project description editable
** DONE Use fallback linear model when at limits of SVM

* TODO Check whether the R SVM maps bools to [0,1] or [-1,1]
* DONE Items for launch on 19th
- [X] Eurobranding
- [X] Download rectangles of map centres
- [X] Finish waffle for access control
- [X] Max area restriction for map selector
- [X] IP logging for geo stuff
- [X] Login count for people
* TODO Ask James for things from his case study at Archway
- [ ] Pipe costs
- [ ] Connection costs
- [ ] Supply costs
* DONE Fix units on pipe cost in map form
* TODO Make solver cancellable (may already work)
* DONE Security on IDs (currently 100% bogus)
* DONE Contact SCIP
* TODO Add diversity curve parameters to UI
* TODO Highlight user-edited objects
We've run out of colours which makes this a bit difficult
Line style is not very visible - maybe only option is to show in table with a filter, or have some other mode or button (chip in the selection info box?)

I could give them a slight highlight

This also relates to questions about whether we want to store this kind of information

Maybe it would be better to have parameter sets with names which we tag buildings with, having a special default row
* TODO Show buildings' connection cost in the table viewer
* DONE Show connection cost as principal in the info panel
* TODO Running time display for running scenarios
* TODO Home button in editor?
* DONE Read Marco's documents
* DONE map-form make x button work on files
* DONE map-form make delete button work in joins list
* DONE Button to delete networks
* DONE Make candidate editor look nicer
* DONE Form validation
* DONE Identify solutions & past versions in project page
* DONE Show running jobs in project page
* DONE geojson download for network
* DONE Sysadmin pages
* DONE Show which supplies have been used as supplies
* DONE Fix units display in candidate editor
* DONE [#A] Make a video about THERMOS editor
* DONE Make resi field importable
* DONE Make import wizard a bit more friendly
- Validation
- Multiple pages
* DONE Show import progress in project page
* DONE Show/manage participants in project page
What should this look like?
* DONE Make email work
* DONE Add delete button for map
* DONE Auto-refresh bits of project page
** DONE Fix reagent first-render flicker in projects.clj
This is simpler than I thought; can use ReactDOM/rehydrate and it mostly works.
There is some stuff about exactly matching text nodes that needs thought
* DONE Add delete button for project
* DONE geojson download for map
* DONE Look into better serverside rendering

Is there some way I can make client-side event handlers not a source of trouble?
At the moment, :on-click #(js/foo) will break on the server side.

Transforming the hiccup input server-side would work but any server-side component that contains this stuff would need to go through said macro.

This is probably roughly acceptable with a bit of work.

Alternatively use someone else's thing (rum) which allegedly works already.
* DONE Use better diversity curve shape
* DONE Put connection cost in interface & model
This should be cost/kWp in the importer, and in the editor
* DONE Fix pipe costs
- [X] In UI, variable and fixed parts
  - [X] Amend specs.path/cost to take global parameters and indicative dimension
  - [X] Pass these values down in editor bits that show cost
- [X] Pass parameters from document
* DONE Fix supply settings units in editor (Â£/W too big as it's about 1)
* DONE Look at Josh's emails for the right cost terms & exponents
* DONE Stop things getting converted to mm which shouldn't be
* DONE Stop buildings having a base cost in the selecto
* DONE Show heat losses
* DONE Invitation email has {:name "Project name"} sent to it
