#+TITLE: Network optimisation formulation
#+LATEX_HEADER: \usepackage{wasysym}
The THERMOS network optimisation is a heuristic centred around a mixed integer/linear programming approach[fn:1].

* Overview

The THERMOS network optimisation process works in a few steps:

1. Problem preparation.

   The representation of the problem used for the editor is converted into a form suitable for the optimiser.
   
   This means:

   1. Making all the different objective contributions commensurable, by converting them into present values or costs
   2. Computing upper and lower bounds for the size and diversity for all pipe segments
   3. Generating linearised pipe cost functions for all pipe segments
   4. Tidying up the network to remove areas which cannot be connected and to combine pipe segments which contain redundant junctions

2. Mixed-integer linear formulation and solving.

   Once the first step is done THERMOS phrases the problem as a mixed integer/linear program (MILP), and hands it off to a solver package to find a solution.

3. Parameter update loop.

   Heat losses and diversity factors cannot be decided as part of the MILP, and depend on the structure of the proposed network.

   Once we have a solution, we re-evaluate the heat losses and diversity factors. 
   Unfortunately this implies that the MILP we solved was not quite the correct one, so we solve it again with the new parameters and see whether this changes the result.

   If the result is unaffected, or we are going in circles, or we have run out of time, we stop.

4. Best solution re-evaluation.

   Finally, we take the best solution we encountered in the parameter update loop and re-evaluate it using the nonlinear pipe cost functions; this again breaks the optimality guarantee from the MILP, but using the full nonlinear cost shapes makes the problem too hard.

* Problem preparation
** Conversion to present values
The MILP does not contain any representation of time, except for a distinction between peak and average operating conditions.

Because of this ongoing revenues and costs have to be summed up over the whole accounting period.

In general, any cost or revenue is converted into a time-series of payments spanning the accounting period. These payments are then discounted and summed in the normal way to give a present value:

*** TODO equation here

Capital costs are converted into a time-series in one of two ways, which can be combined:

- By repetition on some interval
- By annualizing the cost with a loan:

  TODO equation here

There are four combinations possible here:

- No repetition or loan
- Repetition without a loan
- A loan without repetition
- Both a loan and repetition
*** TODO examples here

Some costs depend on decisions made by the optimiser. 

For example, the cost of a heat supply is framed in terms of its capacity, which we do not know up-front.

In these cases, the /unit/ cost is what is converted to a present value. 
Fortunately, geometric discounting is safe to apply to the unit rate, so the present value of the unit cost multiplied with the size is equal to the present value of the size multiplied with the unit cost:

$$
PV(\text{unit rate}) \times \text{size} = PV(\text{unit rate} \times \text{size})
$$

** Flow bounds

The formulation of the MILP involves so-called "big-M" constraints (of which more later), and the use of linearised pipe costs. 

To make both of these things work well, we need to have good /bounds/ on the heat flow on each potential pipe segment. Producing tight bounds here makes the MILP easier to solve, and makes the linearised pipe cost function less erroneous.

** Linearised pipe costs

Pipe costs are represented by equations of the form

$$
\text{length} \times (A + B \times (\oslash ^ {1.1}) + C \times (\oslash ^ {1.3}))
$$

However, the MILP works in terms of power, rather than diameter (it decides on the capacity for pipes in terms of power flow), so we must first convert this equation into one which relates a flow of heat to a cost. 

THERMOS does this using a relation between delivered power and diameter:

* TODO relation here

This relation is itself an approximation, as the real hydraulic behaviour is complicated.

Anyhow, using this relation we are able to numerically generate a pipe cost function which relates kW of power to the pipe's cost per meter.

This function is non-linear, and also not monotonically increasing[fn:2], which makes it hard to efficiently approximate within a MILP. 

In THERMOS, we make a linear approximation to this function for each place where a pipe could go; the approximation's terms are chosen to minimise the square error resulting from using it. 

Because we have flow bounds for every potential pipe, we are able to restrict the range we are approximating to the range of powers that the pipe may be required to deliver, which also helps to keep the error down.

* TODO picture here showing approximations

** Tidying up

Finally we do a bit of tidying up to simplify the optimiser input, removing:

1. Buildings which can't be connected to any supply and have no alternative system possible
2. Paths which don't go to any building
3. Junctions in the road network which would have no effect on the result.
   This combines any paths which can be combined.

* TODO Mixed-integer linear formulation

The result of the above process is a simplified problem description, containing the following information:

- For each demand location:
  - Annual and peak demand
  - The number of demands, for diversity calculation
  - The present value of connecting the building, in three parts: a fixed part, a part per kWh and a part per kWp (kWp being peak demand)
  - The present value of connection costs for the building, split the same way.
  - A list of insulation that is available there, characterised by:
    - The present cost of the insulation, as a fixed cost and cost per kWh abated demand
    - The maximum and minimum values for kWh demand that can be abated
  - A list of alternatives that are available there, characterised by:
    - Present cost, in terms of fixed cost, kWh cost and kWp cost
    - Emissions factors per kWh
- For each supply location:
  - The maximum peak capacity available
  - The present cost of supply, in terms of a fixed cost, a cost per kWp, and a cost per kWh
  - Emissions factors per kWh
- For each possible path:
  - Upper bounds for the heat it might be asked to carry in any possible network, at peak and average time
  - The present cost of using the path, in terms of a fixed cost and a cost per kWp
- For each type of emission:
  - The present cost per tonne emitted
  - Any upper bound required

** Sketch

Before giving the formal description, here is a sketch of how the problem is defined; this should make the formalism a bit easier to read.

The task for the optimiser is to choose what to do with each demand (network or individual system), and what to do with each possible path (pipe or not, and what size).

So, there are decision variables for these choices:

- For every building, a decision about how to heat it and a decision about how much insulation to buy.

  These are a series of binary variables - either a building is on a network or not, it has a gas boiler or not, it has external wall insulation or not, and so on. 

  For insulation, there is also a continuous variable to be decided: how much insulation to buy.
- For every arc (an arc being one of the two directions along a path), a decision about whether to use it and how big to make it.

  So these are two variables, whether we buy the arc or not, and how big a pipe we put in.

Given these decision variables it is possible to write down the objective function. 
For example we can say that if the connection of a building $i$ to network is given by the variable $DVIN_{i}$, then the objective function includes terms like $DVIN_{i} \times \text{pv of connecting }i$.

Similarly for pipes we might say that $AIN_{i,j}$ is 1 if a pipe from $i$ to $j$ is included and 0 otherwise, and $CAPACITY_{i,j}$ is the size of the pipe needed in kWp. Then the cost of the pipe to the objective is $AIN_{i,j} \times \text{fixed cost} + CAPACITY_{i,j} \times \text{variable cost}$.

To prevent the optimiser producing a silly result we also need a system of constraints that describe what a legal solution looks like. 

The detail of these is given below, but it mostly expresses a few simple rules:

- At every point in the network, the flow of heat has to balance, so that if heat flows out into a building or junction it must be balanced by heat that flows in from a pipe or a supply location
- Along every arc in the network, the pipe capacity must be enough to carry the flow of heat along that arc
- At every demand location, there has to be a choice of exactly one type of heating used

** Formalism

First we should introduce some symbols for the mathematical formulation:

- The set of all vertices (junctions or end-points in a network), called $\mathit{VTX}$ and usually indexed by $i$, having subsets:
  - The set of demand vertices $\mathit{DVTX}$
  - The set of supply vertices $\mathit{SVTX}$,
- The set of all arcs (directed pipes in a network), called $\mathit{ARC}$, which is $\mathit{VTX} \times \mathit{VTX}$, usually indexed by $e$ or $(i, j)$
- The set of all edges, called $\mathit{EDGE}$, which is the undirected subset of $\mathit{ARC}$
- The set of all individual system types, called $\mathit{ALT}$, usually indexed by $t$
- The set of insulation types, called $\mathit{INS}$, usually indexed by $t$
- Two types of 'time', usually indexed by $t$. 

  The two times are t_{peak} and t_{mean}, which reflect peak and average / annual operating conditions for the network.

In the code there are a few more sets, but they are implementation details best understood by reading the program. 
We don't explain them here, because it would make the design less clear.

Next we can consider the decision variables for the network part (we will cover individual systems and insulation a bit later):

- $\mathit{DVIN}_i$ is a binary variable (valued 0 or 1) which models which $i$ in $\mathit{DVTX}$ are on the heat network
- $\mathit{SVIN}_i$ is a binary variable which models which $i$ in $\mathit{SVTX}$ are providing heat to the network
- $\mathit{AIN}_{i,j}$ is a binary variable which models which arcs have a pipe on them
- $\mathit{FLOW}_{i,j,t}$ is is a nonnegative real value which models the flow of heat from $i$ to $j$ in time period $t$
- $\mathit{CAPACITY}_{i,j}$ is is a nonnegative real value which models the pipe size required (in kw) from $i$ to $j$ in any period, allowing for diversity (of which more later)
- $\mathit{SUPPLY}_{i,t}$ is a nonnegative real value which models the heat output from supply location $i$ in time $t$
- $\mathit{SUPPLYCAPACITY}_{i}$ is a nonnegative real value which models the plant capacity required at location $i$

These variables produce contributions to objective in a fairly direct way:

TODO

However we must also bind the optimiser to produce a sensible answer, using some constraints:

- Flow balances :: The flow balance rule is what makes the model build a network at all.
                   For every point $i$ at each "time" $t$ (which includes all supply points, demand points, and junctions between paths), we define the /unmet demand/ at $i$ in $t$ as the difference between all the heat leaving $i$ and all the heat flowing into $i$.

                   In formal terms, this the unmet demand at $i$ in time $t$ is

                   \[
                   u = (\mathit{demand} + \mathit{outflow} + \mathit{losses}_{}) - (\mathit{supply} + \mathit{inflow})
                   \]

                   where

                   \[
                   \mathit{demand} = \mathit{DVIN}_i \times \mathit{DEMAND}_{i, t} \text{, or zero if $i$ is not a demand location}
                   \]
                   
                   and
                   
                   \[
                   \mathit{supply} = \mathit{SUPPLY}_{i, t} \text{, or zero if $i$ is not a supply location}
                   \]

                   and

                   \[
                   \mathit{outflow} = \sum_{j\in N(i)}\mathit{FLOW}_{i,j,t}
                   \]

                   and

                   \[
                   \mathit{inflow} = \sum_{j\in N(i)}\mathit{FLOW}_{j,i,t}
                   \]
                   
                   and

                   \[
                   \mathit{losses} = \sum_{j\in N(i)}\mathit{AIN}_{j,i} \times \mathit{LOSS_{i,j}}
                   \]

                   Disregarding insulation and skipping over heat losses for now, we constrain $u_i = 0$  for every $i$.
                   
                   [[./formulation/example-flows.svg]]
                   #+CAPTION: A small problem, to illustrate the flow constraint. Vertex a is a supply location and d is a demand location. The red arrow shows the supply input to the network, the green arrow the demand output, and the grey arrows heat losses. The unmet demand should be zero at a, b, c, and d. Following this through, we can see that if heat is flowing out at d, for the flow to balance at d it must flow in from b or c. If it were flowing in from b, then for the flow to balance at /b/ it would have to flow in from a. This would imply that for the flow to balance at /a/, some heat would have to come in from the supply.

- Flow requires pipe :: Since $\mathit{AIN}$ is used to contribute pipe fixed costs to the objective, we don't want to allow $\mathit{AIN}_{i,j} = 0$ unless $\mathit{FLOW}_{i,j,t}$ = 0 as well.

     This is done using what's normally called a /big-M/ constraint, which looks like this:

     \[
     \forall t: \mathit{FLOW}_{i,j,t} \leq \mathit{AIN}_{i,j} \times M_{i,j,t}
     \]

     Here $M$ is the big-M in question - it is a number chosen to be a bit bigger than the largest value $\mathit{FLOW}_{i,j,t}$ would sensibly need to take. In this case it is the appropriate flow upper bound, whose computation is described above.

     The effect is to ensure that we cannot use the pipe unless we also pay for it!

- Capacity suffices :: The pipe cost consists of fixed and variable parts; $\mathit{AIN}$ turns the fixed part on and off, and $\mathit{CAPACITY}$ controls the variable part. Without being forced otherwise, the optimiser would set $\mathit{CAPACITY}$ to 0, so a bit like the previous constraint we need to make sure that if there is a flow, then there is capacity for that flow. 

     However, since the $\mathit{FLOW}$ variable reflects the sum of all demands 'down the pipe' without accounting for diversity, we need to introduce a /diversity factor/, whose mysterious origins will be described later. For now it is sufficient to know that it's a number less than or equal to 1, which makes the required pipe smaller if it is carrying many demands at peak.
     
     \[
     \forall t: \mathit{CAPACITY}_{i,j} \geq \mathit{DIVERSITY}_{i,j,t} \times \mathit{FLOW}_{i,j,t}
     \]

     and also (because capacity is about an /edge/, but flow is about an /arc/)

     \[
     \forall t: \mathit{CAPACITY}_{i,j} \geq \mathit{DIVERSITY}_{j,i,t} \times \mathit{FLOW}_{j,i,t}
     \]
     
- Flow one way :: To prevent the model putting a pipe on a path in both the forward and reverse directions we say:

                  \[
                  \mathit{AIN}_{i,j} + \mathit{AIN}_{j, i} \leq 1
                  \]



** TODO Insulation

** TODO Alternatives

* Parameter updates

In the formalism above there are two sets of parameters -- constants, from the point of view of the MILP -- which we have referred to but not explained. 

These are $\mathit{LOSSES}$ and $\mathit{DIVERSITY}$, which represent for each edge in the problem the typical heat losses from a pipe on that edge and the diversity factor for that edge which let us use a smaller pipe than the sum of flows would imply.

As far as we know these values cannot be expressed within the optimisation problem without either making it very non-linear (perhaps quadratic) or adding a very large number of additional binary variables and complex constraints.

Instead of doing one of these, in THERMOS we try to iteratively approximate these values by:

1. Making an initial guess for each edge
2. Solving the resulting MILP
3. Using the solution to produce a better guess
4. Updating the MILP with these new guesses, and then going back to step 2.

We stop this process if the solution stops changing, or if we find that we are in a cycle (so guess X gives solution A which leads to guess Y, which gives solution B, which leads back to guess X again).

** TODO Finding diversity factors

** TODO Finding heat losses

* TODO Solution re-evaluation

* Footnotes
[fn:1] See https://en.wikipedia.org/wiki/Linear_programming#Integer_unknowns
[fn:2] Monotonically increasing (where an increase is worse) nonlinear functions generally have efficient linear approximations, because a linear program given a piecewise linear approximation will 'use up' the lower (and hence better) pieces before it uses up the worse ones.

Decreasing functions can only be piecewise approximated using more complicated gadgets, because some constraints and extra integer variables are needed to prevent the solution taking 'economies of scale' from the curve when it hasn't gone to the scale needed.
